// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: eojHsTxh2CznYQUhCcvLfa
// Component: nyCIJhwBoCru
import * as React from "react";
import {
  PlasmicLink as PlasmicLink__,
  Stack as Stack__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  hasVariant,
  useDollarState
} from "@plasmicapp/react-web";
import { useDataEnv } from "@plasmicapp/react-web/lib/host";
import "@plasmicapp/react-web/lib/plasmic.css";
import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: eojHsTxh2CznYQUhCcvLfa/projectcss
import sty from "./PlasmicLeftSliderLinks.module.css"; // plasmic-import: nyCIJhwBoCru/css

createPlasmicElementProxy;

export const PlasmicLeftSliderLinks__VariantProps = new Array("varient2");

export const PlasmicLeftSliderLinks__ArgProps = new Array(
  "sliderLinks",
  "sliderLinksSmall"
);

const $$ = {};

function PlasmicLeftSliderLinks__RenderFunc(props) {
  const { variants, overrides, forNode } = props;
  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );
  const $props = {
    ...args,
    ...variants
  };
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;
  const stateSpecs = React.useMemo(
    () => [
      {
        path: "varient2",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.varient2
      }
    ],

    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });
  return (
    <Stack__
      as={"div"}
      data-plasmic-name={"sliderLeftContent"}
      data-plasmic-override={overrides.sliderLeftContent}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      hasGap={true}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_antd_5_hostless_css.plasmic_tokens,
        sty.sliderLeftContent,
        "left-slider-content",
        {
          [sty.sliderLeftContentvarient2]: hasVariant(
            $state,
            "varient2",
            "varient2"
          )
        }
      )}
    >
      <Stack__
        as={"div"}
        hasGap={true}
        className={classNames(projectcss.all, sty.freeBox__kBawO)}
      >
        {(_par => (!_par ? [] : Array.isArray(_par) ? _par : [_par]))(
          (() => {
            try {
              return $props.sliderLinks;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return [];
              }
              throw e;
            }
          })()
        ).map((__plasmic_item_0, __plasmic_idx_0) => {
          const currentItem = __plasmic_item_0;
          const currentIndex = __plasmic_idx_0;
          return (
            <Stack__
              as={"div"}
              data-plasmic-name={"menuLinks"}
              data-plasmic-override={overrides.menuLinks}
              hasGap={true}
              className={classNames(projectcss.all, sty.menuLinks)}
              key={currentIndex}
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__zLMk1,
                  "left-slider-dash",
                  {
                    [sty.textvarient2__zLMk15ISyn]: hasVariant(
                      $state,
                      "varient2",
                      "varient2"
                    )
                  }
                )}
              >
                {"\u2014"}
              </div>
              <PlasmicLink__
                className={classNames(
                  projectcss.all,
                  projectcss.a,
                  sty.link__h88C1,
                  (() => {
                    try {
                      return currentItem.className;
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return undefined;
                      }
                      throw e;
                    }
                  })(),
                  {
                    [sty.linkvarient2__h88C15ISyn]: hasVariant(
                      $state,
                      "varient2",
                      "varient2"
                    )
                  }
                )}
                href={(() => {
                  try {
                    return currentItem.pageurl;
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return "";
                    }
                    throw e;
                  }
                })()}
                platform={"react"}
              >
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__bhipR,
                    {
                      [sty.textvarient2__bhipR5ISyn]: hasVariant(
                        $state,
                        "varient2",
                        "varient2"
                      )
                    }
                  )}
                >
                  <React.Fragment>
                    {(() => {
                      try {
                        return currentItem.label;
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return "Enter Value";
                        }
                        throw e;
                      }
                    })()}
                  </React.Fragment>
                </div>
              </PlasmicLink__>
            </Stack__>
          );
        })}
        <Stack__
          as={"div"}
          data-plasmic-name={"menuLinks2"}
          data-plasmic-override={overrides.menuLinks2}
          hasGap={true}
          className={classNames(projectcss.all, sty.menuLinks2, {
            [sty.menuLinks2varient2]: hasVariant($state, "varient2", "varient2")
          })}
        >
          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text__tc6X,
              "left-slider-dash",
              {
                [sty.textvarient2__tc6X5ISyn]: hasVariant(
                  $state,
                  "varient2",
                  "varient2"
                )
              }
            )}
          >
            {"\u2014"}
          </div>
          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text__jWeUs,
              "left-slider-policies",
              {
                [sty.textvarient2__jWeUs5ISyn]: hasVariant(
                  $state,
                  "varient2",
                  "varient2"
                )
              }
            )}
          >
            {"Policies"}
          </div>
        </Stack__>
      </Stack__>
      <Stack__
        as={"div"}
        hasGap={true}
        className={classNames(projectcss.all, sty.freeBox__dxxZu)}
      >
        {(_par => (!_par ? [] : Array.isArray(_par) ? _par : [_par]))(
          (() => {
            try {
              return $props.sliderLinksSmall;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return [];
              }
              throw e;
            }
          })()
        ).map((__plasmic_item_0, __plasmic_idx_0) => {
          const currentItem = __plasmic_item_0;
          const currentIndex = __plasmic_idx_0;
          return (
            <Stack__
              as={"div"}
              data-plasmic-name={"menuLinksSmall"}
              data-plasmic-override={overrides.menuLinksSmall}
              hasGap={true}
              className={classNames(projectcss.all, sty.menuLinksSmall)}
              key={currentIndex}
            >
              <PlasmicLink__
                className={classNames(
                  projectcss.all,
                  projectcss.a,
                  sty.link__eGcCm,
                  (() => {
                    try {
                      return currentItem.className;
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return undefined;
                      }
                      throw e;
                    }
                  })(),
                  {
                    [sty.linkvarient2__eGcCm5ISyn]: hasVariant(
                      $state,
                      "varient2",
                      "varient2"
                    )
                  }
                )}
                href={(() => {
                  try {
                    return currentItem.pageurl;
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return undefined;
                    }
                    throw e;
                  }
                })()}
                platform={"react"}
              >
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__vj9Fu,
                    {
                      [sty.textvarient2__vj9Fu5ISyn]: hasVariant(
                        $state,
                        "varient2",
                        "varient2"
                      )
                    }
                  )}
                >
                  <React.Fragment>
                    {(() => {
                      try {
                        return currentItem.label;
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return "\u2014 Privacy";
                        }
                        throw e;
                      }
                    })()}
                  </React.Fragment>
                </div>
              </PlasmicLink__>
            </Stack__>
          );
        })}
      </Stack__>
    </Stack__>
  );
}

const PlasmicDescendants = {
  sliderLeftContent: [
    "sliderLeftContent",
    "menuLinks",
    "menuLinks2",
    "menuLinksSmall"
  ],

  menuLinks: ["menuLinks"],
  menuLinks2: ["menuLinks2"],
  menuLinksSmall: ["menuLinksSmall"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicLeftSliderLinks__ArgProps,
          internalVariantPropNames: PlasmicLeftSliderLinks__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicLeftSliderLinks__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "sliderLeftContent") {
    func.displayName = "PlasmicLeftSliderLinks";
  } else {
    func.displayName = `PlasmicLeftSliderLinks.${nodeName}`;
  }
  return func;
}

export const PlasmicLeftSliderLinks = Object.assign(
  // Top-level PlasmicLeftSliderLinks renders the root element
  makeNodeComponent("sliderLeftContent"),
  {
    // Helper components rendering sub-elements
    menuLinks: makeNodeComponent("menuLinks"),
    menuLinks2: makeNodeComponent("menuLinks2"),
    menuLinksSmall: makeNodeComponent("menuLinksSmall"),
    // Metadata about props expected for PlasmicLeftSliderLinks
    internalVariantProps: PlasmicLeftSliderLinks__VariantProps,
    internalArgProps: PlasmicLeftSliderLinks__ArgProps
  }
);

export default PlasmicLeftSliderLinks;
/* prettier-ignore-end */
