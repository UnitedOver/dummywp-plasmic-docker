// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: eojHsTxh2CznYQUhCcvLfa
// Component: cPgpe8hlD91L
import * as React from "react";
import {
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  hasVariant
} from "@plasmicapp/react-web";
import { useDataEnv } from "@plasmicapp/react-web/lib/host";
import AdditionalSeoData from "../../AdditionalSeoData"; // plasmic-import: qJYR5wLO6ptv/component
import DummyWpContainer from "../../DummyWpContainer"; // plasmic-import: LgX6if24X2q3/component
import { Embed } from "@plasmicpkgs/plasmic-basic-components";
import DummyWpFooter from "../../DummyWpFooter"; // plasmic-import: Ou4WpcxmNsUe/component
import { useScreenVariants as useScreenVariantsngPcOWd604O } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: NGPcOWd-604O/globalVariant
import "@plasmicapp/react-web/lib/plasmic.css";
import projectcss from "./plasmic.module.css"; // plasmic-import: eojHsTxh2CznYQUhCcvLfa/projectcss
import sty from "./PlasmicContact.module.css"; // plasmic-import: cPgpe8hlD91L/css

createPlasmicElementProxy;

export const PlasmicContact__VariantProps = new Array();

export const PlasmicContact__ArgProps = new Array();

const $$ = {};

function PlasmicContact__RenderFunc(props) {
  const { variants, overrides, forNode } = props;
  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );
  const $props = {
    ...args,
    ...variants
  };
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;
  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantsngPcOWd604O()
  });
  return (
    <React.Fragment>
      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            sty.root
          )}
        >
          <AdditionalSeoData
            data-plasmic-name={"additionalSeoData"}
            data-plasmic-override={overrides.additionalSeoData}
            className={classNames("__wab_instance", sty.additionalSeoData)}
          />

          <DummyWpContainer
            data-plasmic-name={"dummyWpContainer"}
            data-plasmic-override={overrides.dummyWpContainer}
            className={classNames("__wab_instance", sty.dummyWpContainer)}
            querydata={(() => {
              try {
                return $ctx.query.item;
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return undefined;
                }
                throw e;
              }
            })()}
          />

          <div
            data-plasmic-name={"contents"}
            data-plasmic-override={overrides.contents}
            className={classNames(projectcss.all, sty.contents)}
          >
            <div
              data-plasmic-name={"text"}
              data-plasmic-override={overrides.text}
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text,
                hasVariant(globalVariants, "screen", "bp862")
                  ? "about-para"
                  : undefined
              )}
            >
              {"Maybe you wanna get in touch?"}
            </div>
            <Embed
              data-plasmic-name={"customForm"}
              data-plasmic-override={overrides.customForm}
              className={classNames("__wab_instance", sty.customForm)}
              code={
                hasVariant(globalVariants, "screen", "bp862")
                  ? '<body>\r\n  <form id="contactForm" class="contactform">\r\n    Hey, my name is\r\n    <label class="input-sizer">\r\n      <input required type="text" name="name" size="4" placeholder="John Doe" class="form-name" oninput="this.parentNode.dataset.value = this.value">\r\n    </label>\r\n    and you can reach me at\r\n    <label class="input-sizer">\r\n      <input required type="email" pattern="^([a-zA-Z0-9_\\-\\.]+)@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.)|(([a-zA-Z0-9\\-]+\\.)+))([a-zA-Z]{2,4}|[0-9]{1,3})(\\]?)$"  name="email" size="4" placeholder="john@mail.com" class="form-email" oninput="this.parentNode.dataset.value = this.value">\r\n    </label>. I want to contact you about\r\n    <label class="input-sizer">\r\n      <input required type="text" name="subject" size="4" placeholder="Subject" autocomplete="off" class="form-subject" oninput="this.parentNode.dataset.value = this.value">\r\n    </label> and here are the details for it\r\n    <label class="input-sizer stacked">\r\n      <textarea required name="body" placeholder="type your query here" rows="1" style="resize: vertical;" class="form-textarea" oninput="this.parentNode.dataset.value = this.value"></textarea>\r\n    </label>\r\n\r\n    <button type="submit" class="button">Submit</button>\r\n\r\n    <br>\r\n    <div class="pageclip-form__success" style="display:none;">\r\n      <div class="pageclip-form__success__message">\r\n        Thank you for getting in touch with us, we\u2019ll reach out to you shortly.\r\n      </div>\r\n    </div>\r\n  </form>\r\n\r\n  <script>\r\n    var form = document.getElementById(\'contactForm\');\r\n    var successMessage = document.querySelector(\'.pageclip-form__success\');\r\n    var isSubmitting = false;\r\n\r\n    form.addEventListener(\'submit\', function(event) {\r\n      event.preventDefault();\r\n      if (isSubmitting) return;\r\n\r\n      isSubmitting = true;\r\n      const formData = {\r\n        s: form.body.value,\r\n        email: form.email.value,\r\n        name: form.name.value,\r\n        subject: form.subject.value,\r\n      };\r\n\r\n      fetch("https://dwp-cf.uo.workers.dev", {\r\n        method: "POST",\r\n        headers: { "Content-Type": "application/json" },\r\n        body: JSON.stringify(formData)\r\n      })\r\n      .then(response => {\r\n        if (response.ok) {\r\n          successMessage.style.display = \'block\';\r\n          form.reset();\r\n          Array.from(form.querySelectorAll(\'.input-sizer\')).forEach(el => el.dataset.value = \'\');\r\n        } else {\r\n          alert("There was an error with your request. Please try again.");\r\n        }\r\n      })\r\n      .catch(error => console.error(\'Error:\', error))\r\n      .finally(() => { isSubmitting = false; });\r\n    });\r\n\r\n    // Hide success message when typing in any field after submission\r\n    form.addEventListener(\'input\', function() {\r\n      successMessage.style.display = \'none\';\r\n    });\r\n  </script>\r\n</body>\r\n\r\n<style>\r\n  form {\r\n      display: block;\r\n      margin-top: 0em;\r\n      unicode-bidi: isolate;\r\n  }\r\n\r\n  .contactform {\r\n      font-family: "Courier Prime", monospace;\r\n      font-size: 34px;\r\n      color: #1d1d28;\r\n      line-height: 1.4;\r\n  }\r\n\r\n  .input-sizer input, .input-sizer textarea, .input-sizer::after {\r\n      width: auto;\r\n      min-width: 224px;\r\n      grid-area: 1 / 2;\r\n      font: inherit;\r\n      padding: 0 8px;\r\n      margin: 0;\r\n      resize: none;\r\n      background: 0 0;\r\n      -webkit-appearance: none;\r\n      -moz-appearance: none;\r\n      appearance: none;\r\n      border: none;\r\n      outline: 0;\r\n      color:#fc6a51;\r\n      border-bottom: 3px solid rgb(29 29 40 / 10%);\r\n  }\r\n\r\n  .input-sizer input::placeholder,\r\n  .input-sizer textarea::placeholder {\r\n    color: #fca697;\r\n  }\r\n\r\n  .input-sizer {\r\n      display: inline-grid;\r\n      /* padding: .25em .5em; */\r\n      padding: .25em 0em !important;\r\n  }\r\n\r\n  .input-sizer::after {\r\n      content: attr(data-value) " ";\r\n      visibility: hidden;\r\n      white-space: pre-wrap;\r\n  }\r\n\r\n  .contactform button {\r\n      display: block;\r\n      background: #1d1d28;\r\n      color: #fc6a51;\r\n      font-size: 19px;\r\n      height: 56px;\r\n      font-weight: 700;\r\n      border: none;\r\n      width: 280px;\r\n      margin-top: 24px;\r\n      border-radius: 2px;\r\n      cursor:pointer;\r\n  }\r\n\r\n    .contactform, .contactform form input, .contactform form textarea {\r\n        font-size: calc(22px + 12*((100vw - 320px) / 543));\r\n    }\r\n</style>\r\n'
                  : '<body>\r\n  <form id="contactForm" class="contactform">\r\n    Hey, my name is\r\n    <label class="input-sizer">\r\n      <input required type="text" name="name" size="4" placeholder="John Doe" class="form-name" oninput="this.parentNode.dataset.value = this.value">\r\n    </label>\r\n    and you can reach me at\r\n    <label class="input-sizer">\r\n      <input required type="email" pattern="^([a-zA-Z0-9_\\-\\.]+)@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.)|(([a-zA-Z0-9\\-]+\\.)+))([a-zA-Z]{2,4}|[0-9]{1,3})(\\]?)$"  name="email" size="4" placeholder="john@mail.com" class="form-email" oninput="this.parentNode.dataset.value = this.value">\r\n    </label>. I want to contact you about\r\n    <label class="input-sizer">\r\n      <input required type="text" name="subject" size="4" placeholder="Subject" autocomplete="off" class="form-subject" oninput="this.parentNode.dataset.value = this.value">\r\n    </label> and here are the details for it\r\n    <label class="input-sizer stacked">\r\n      <textarea required name="body" placeholder="type your query here" rows="1" style="resize: vertical;" class="form-textarea" oninput="this.parentNode.dataset.value = this.value"></textarea>\r\n    </label>\r\n\r\n    <button type="submit" class="button">Submit</button>\r\n\r\n    <br>\r\n    <div class="pageclip-form__success" style="display:none;">\r\n      <div class="pageclip-form__success__message">\r\n        Thank you for getting in touch with us, we\u2019ll reach out to you shortly.\r\n      </div>\r\n    </div>\r\n  </form>\r\n\r\n  <script>\r\n    var form = document.getElementById(\'contactForm\');\r\n    var successMessage = document.querySelector(\'.pageclip-form__success\');\r\n    var isSubmitting = false;\r\n\r\n    form.addEventListener(\'submit\', function(event) {\r\n      event.preventDefault();\r\n      if (isSubmitting) return;\r\n\r\n      isSubmitting = true;\r\n      const formData = {\r\n        s: form.body.value,\r\n        email: form.email.value,\r\n        name: form.name.value,\r\n        subject: form.subject.value,\r\n      };\r\n\r\n      fetch("https://dwp-cf.uo.workers.dev", {\r\n        method: "POST",\r\n        headers: { "Content-Type": "application/json" },\r\n        body: JSON.stringify(formData)\r\n      })\r\n      .then(response => {\r\n        if (response.ok) {\r\n          successMessage.style.display = \'block\';\r\n          form.reset();\r\n          Array.from(form.querySelectorAll(\'.input-sizer\')).forEach(el => el.dataset.value = \'\');\r\n        } else {\r\n          alert("There was an error with your request. Please try again.");\r\n        }\r\n      })\r\n      .catch(error => console.error(\'Error:\', error))\r\n      .finally(() => { isSubmitting = false; });\r\n    });\r\n\r\n    // Hide success message when typing in any field after submission\r\n    form.addEventListener(\'input\', function() {\r\n      successMessage.style.display = \'none\';\r\n    });\r\n  </script>\r\n</body>\r\n\r\n<style>\r\n  form {\r\n      display: block;\r\n      margin-top: 0em;\r\n      unicode-bidi: isolate;\r\n  }\r\n\r\n  .contactform {\r\n      font-family: "Courier Prime", monospace;\r\n      font-size: 34px;\r\n      color: #1d1d28;\r\n      line-height: 1.4;\r\n  }\r\n\r\n  .input-sizer input, .input-sizer textarea, .input-sizer::after {\r\n      width: auto;\r\n      min-width: 224px;\r\n      grid-area: 1 / 2;\r\n      font: inherit;\r\n      padding: 0 8px;\r\n      margin: 0;\r\n      resize: none;\r\n      background: 0 0;\r\n      -webkit-appearance: none;\r\n      -moz-appearance: none;\r\n      appearance: none;\r\n      border: none;\r\n      outline: 0;\r\n      color:#fc6a51;\r\n      border-bottom: 3px solid rgb(29 29 40 / 10%);\r\n  }\r\n\r\n  .input-sizer input::placeholder,\r\n  .input-sizer textarea::placeholder {\r\n    color: #fca697;\r\n  }\r\n\r\n  .input-sizer {\r\n      display: inline-grid;\r\n      /* padding: .25em .5em; */\r\n      padding: .25em 0em !important;\r\n  }\r\n\r\n  .input-sizer::after {\r\n      content: attr(data-value) " ";\r\n      visibility: hidden;\r\n      white-space: pre-wrap;\r\n  }\r\n\r\n  .contactform button {\r\n      display: block;\r\n      background: #1d1d28;\r\n      color: #fc6a51;\r\n      font-size: 19px;\r\n      height: 56px;\r\n      font-weight: 700;\r\n      border: none;\r\n      width: 280px;\r\n      margin-top: 24px;\r\n      border-radius: 2px;\r\n      cursor:pointer;\r\n  }\r\n</style>\r\n'
              }
            />
          </div>
          <DummyWpFooter
            data-plasmic-name={"dummyWpFooter"}
            data-plasmic-override={overrides.dummyWpFooter}
            className={classNames("__wab_instance", sty.dummyWpFooter)}
          />
        </div>
      </div>
    </React.Fragment>
  );
}

const PlasmicDescendants = {
  root: [
    "root",
    "additionalSeoData",
    "dummyWpContainer",
    "contents",
    "text",
    "customForm",
    "dummyWpFooter"
  ],

  additionalSeoData: ["additionalSeoData"],
  dummyWpContainer: ["dummyWpContainer"],
  contents: ["contents", "text", "customForm"],
  text: ["text"],
  customForm: ["customForm"],
  dummyWpFooter: ["dummyWpFooter"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicContact__ArgProps,
          internalVariantPropNames: PlasmicContact__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicContact__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicContact";
  } else {
    func.displayName = `PlasmicContact.${nodeName}`;
  }
  return func;
}

export const PlasmicContact = Object.assign(
  // Top-level PlasmicContact renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    additionalSeoData: makeNodeComponent("additionalSeoData"),
    dummyWpContainer: makeNodeComponent("dummyWpContainer"),
    contents: makeNodeComponent("contents"),
    text: makeNodeComponent("text"),
    customForm: makeNodeComponent("customForm"),
    dummyWpFooter: makeNodeComponent("dummyWpFooter"),
    // Metadata about props expected for PlasmicContact
    internalVariantProps: PlasmicContact__VariantProps,
    internalArgProps: PlasmicContact__ArgProps,
    // Page metadata
    pageMetadata: {
      title: "dummywp | Contact Us",
      description:
        "Create free WordPress staging site where you can upload your own plugin and theme to test out things before you make it live on your main site.",
      ogImageSrc:
        "https://site-assets.plasmic.app/70bd5841dbee59b55a44fb215e176a76.png",
      canonical: ""
    }
  }
);

export default PlasmicContact;
/* prettier-ignore-end */
