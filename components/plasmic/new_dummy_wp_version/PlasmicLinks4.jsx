// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: eojHsTxh2CznYQUhCcvLfa
// Component: A5bn7aI-dAhg
import * as React from "react";
import {
  PlasmicLink as PlasmicLink__,
  Stack as Stack__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  renderPlasmicSlot
} from "@plasmicapp/react-web";
import { useDataEnv } from "@plasmicapp/react-web/lib/host";
import "@plasmicapp/react-web/lib/plasmic.css";
import projectcss from "./plasmic.module.css"; // plasmic-import: eojHsTxh2CznYQUhCcvLfa/projectcss
import sty from "./PlasmicLinks4.module.css"; // plasmic-import: A5bn7aI-dAhg/css

createPlasmicElementProxy;

export const PlasmicLinks4__VariantProps = new Array();

export const PlasmicLinks4__ArgProps = new Array("linkValue", "linkWrapper2");

const $$ = {};

function PlasmicLinks4__RenderFunc(props) {
  const { variants, overrides, forNode } = props;
  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );
  const $props = {
    ...args,
    ...variants
  };
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;
  return (
    <Stack__
      as={"div"}
      data-plasmic-name={"linkWrapper"}
      data-plasmic-override={overrides.linkWrapper}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      hasGap={true}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        sty.linkWrapper
      )}
    >
      {renderPlasmicSlot({
        defaultContents: (
          <React.Fragment>
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text___9OLgx
              )}
            >
              {"\u2014"}
            </div>
            <PlasmicLink__
              className={classNames(
                projectcss.all,
                projectcss.a,
                sty.link__zqaRe
              )}
              href={""}
              platform={"react"}
            />
          </React.Fragment>
        ),

        value: args.linkWrapper2
      })}
    </Stack__>
  );
}

const PlasmicDescendants = {
  linkWrapper: ["linkWrapper"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicLinks4__ArgProps,
          internalVariantPropNames: PlasmicLinks4__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicLinks4__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "linkWrapper") {
    func.displayName = "PlasmicLinks4";
  } else {
    func.displayName = `PlasmicLinks4.${nodeName}`;
  }
  return func;
}

export const PlasmicLinks4 = Object.assign(
  // Top-level PlasmicLinks4 renders the root element
  makeNodeComponent("linkWrapper"),
  {
    // Helper components rendering sub-elements
    // Metadata about props expected for PlasmicLinks4
    internalVariantProps: PlasmicLinks4__VariantProps,
    internalArgProps: PlasmicLinks4__ArgProps
  }
);

export default PlasmicLinks4;
/* prettier-ignore-end */
