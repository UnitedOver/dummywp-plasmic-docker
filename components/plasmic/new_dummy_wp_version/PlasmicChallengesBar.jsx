// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: eojHsTxh2CznYQUhCcvLfa
// Component: Dz5_oQOY5Jgt
import * as React from "react";
import {
  PlasmicImg as PlasmicImg__,
  Stack as Stack__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  hasVariant
} from "@plasmicapp/react-web";
import { useDataEnv } from "@plasmicapp/react-web/lib/host";
import { useScreenVariants as useScreenVariantsngPcOWd604O } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: NGPcOWd-604O/globalVariant
import "@plasmicapp/react-web/lib/plasmic.css";
import projectcss from "./plasmic.module.css"; // plasmic-import: eojHsTxh2CznYQUhCcvLfa/projectcss
import sty from "./PlasmicChallengesBar.module.css"; // plasmic-import: Dz5_oQOY5Jgt/css

createPlasmicElementProxy;

export const PlasmicChallengesBar__VariantProps = new Array();

export const PlasmicChallengesBar__ArgProps = new Array(
  "challengeHeading",
  "challengeText",
  "challengeIcon"
);

const $$ = {};

function PlasmicChallengesBar__RenderFunc(props) {
  const { variants, overrides, forNode } = props;
  const args = React.useMemo(
    () =>
      Object.assign(
        {
          challengeHeading: "Enter Heading",
          challengeText: "Enter Text"
        },
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );
  const $props = {
    ...args,
    ...variants
  };
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;
  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantsngPcOWd604O()
  });
  return (
    <Stack__
      as={"div"}
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      hasGap={true}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        sty.root
      )}
    >
      <div className={classNames(projectcss.all, sty.freeBox__iBDpX)}>
        <PlasmicImg__
          data-plasmic-name={"img"}
          data-plasmic-override={overrides.img}
          alt={""}
          className={classNames(sty.img)}
          displayHeight={"48px"}
          displayMaxHeight={"none"}
          displayMaxWidth={"100%"}
          displayMinHeight={"0"}
          displayMinWidth={"0"}
          displayWidth={"48px"}
          loading={"lazy"}
          src={args.challengeIcon}
        />

        <div
          className={classNames(
            projectcss.all,
            projectcss.__wab_text,
            sty.text__vg11K,
            hasVariant(globalVariants, "screen", "bp862")
              ? "challenge-heading"
              : undefined
          )}
        >
          <React.Fragment>
            {(() => {
              try {
                return $props.challengeHeading;
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return "Enter Props Text";
                }
                throw e;
              }
            })()}
          </React.Fragment>
        </div>
        <div className={classNames(projectcss.all, sty.freeBox__rkBjT)} />
      </div>
      <div
        className={classNames(
          projectcss.all,
          projectcss.__wab_text,
          sty.text___5Hwwt
        )}
      >
        <React.Fragment>
          {(() => {
            try {
              return $props.challengeText;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return "Enter text";
              }
              throw e;
            }
          })()}
        </React.Fragment>
      </div>
    </Stack__>
  );
}

const PlasmicDescendants = {
  root: ["root", "img"],
  img: ["img"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicChallengesBar__ArgProps,
          internalVariantPropNames: PlasmicChallengesBar__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicChallengesBar__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicChallengesBar";
  } else {
    func.displayName = `PlasmicChallengesBar.${nodeName}`;
  }
  return func;
}

export const PlasmicChallengesBar = Object.assign(
  // Top-level PlasmicChallengesBar renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    img: makeNodeComponent("img"),
    // Metadata about props expected for PlasmicChallengesBar
    internalVariantProps: PlasmicChallengesBar__VariantProps,
    internalArgProps: PlasmicChallengesBar__ArgProps
  }
);

export default PlasmicChallengesBar;
/* prettier-ignore-end */
