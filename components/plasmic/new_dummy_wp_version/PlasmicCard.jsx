// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: eojHsTxh2CznYQUhCcvLfa
// Component: udIG5vtaNYEp
import * as React from "react";
import {
  Stack as Stack__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  hasVariant,
  renderPlasmicSlot,
  useDollarState
} from "@plasmicapp/react-web";
import { useDataEnv } from "@plasmicapp/react-web/lib/host";
import { useScreenVariants as useScreenVariantsngPcOWd604O } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: NGPcOWd-604O/globalVariant
import "@plasmicapp/react-web/lib/plasmic.css";
import projectcss from "./plasmic.module.css"; // plasmic-import: eojHsTxh2CznYQUhCcvLfa/projectcss
import sty from "./PlasmicCard.module.css"; // plasmic-import: udIG5vtaNYEp/css
import CheckSvgIcon from "./icons/PlasmicIcon__CheckSvg"; // plasmic-import: C3CtLhWE-hgK/icon
import IconIcon from "./icons/PlasmicIcon__Icon"; // plasmic-import: KSBHOXhYY2Jr/icon
import BulletDashSvgIcon from "./icons/PlasmicIcon__BulletDashSvg"; // plasmic-import: QrteRULFi0ij/icon

createPlasmicElementProxy;

export const PlasmicCard__VariantProps = new Array("noTitle");

export const PlasmicCard__ArgProps = new Array(
  "cardHeading",
  "cardSubHeading",
  "cardText",
  "cardButtonText",
  "listLoop",
  "children",
  "startIcon",
  "endIcon"
);

const $$ = {};

function PlasmicCard__RenderFunc(props) {
  const { variants, overrides, forNode } = props;
  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );
  const $props = {
    ...args,
    ...variants
  };
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;
  const stateSpecs = React.useMemo(
    () => [
      {
        path: "noTitle",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.noTitle
      }
    ],

    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });
  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantsngPcOWd604O()
  });
  return (
    <div
      data-plasmic-name={"card"}
      data-plasmic-override={overrides.card}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        sty.card,
        "plan-cards"
      )}
    >
      <div
        data-plasmic-name={"header"}
        data-plasmic-override={overrides.header}
        className={classNames(projectcss.all, sty.header, {
          [sty.headernoTitle]: hasVariant($state, "noTitle", "noTitle")
        })}
      >
        <div
          className={classNames(projectcss.all, sty.freeBox__au6Pz, {
            [sty.freeBoxnoTitle__au6PzxxOye]: hasVariant(
              $state,
              "noTitle",
              "noTitle"
            )
          })}
        >
          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text___5TAr5,
              hasVariant(globalVariants, "screen", "bp862")
                ? "plans-heading"
                : undefined
            )}
          >
            <React.Fragment>
              {(() => {
                try {
                  return $props.cardHeading;
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return "Features";
                  }
                  throw e;
                }
              })()}
            </React.Fragment>
          </div>
        </div>
      </div>
      <div
        data-plasmic-name={"body"}
        data-plasmic-override={overrides.body}
        className={classNames(projectcss.all, sty.body, {
          [sty.bodynoTitle]: hasVariant($state, "noTitle", "noTitle")
        })}
      >
        <div className={classNames(projectcss.all, sty.freeBox__sy8E5)}>
          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text__kOEwk,
              hasVariant(globalVariants, "screen", "bp862")
                ? "plans-subHeading"
                : undefined
            )}
          >
            <React.Fragment>
              {(() => {
                try {
                  return $props.cardSubHeading;
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return "Enter Value";
                  }
                  throw e;
                }
              })()}
            </React.Fragment>
          </div>
          {renderPlasmicSlot({
            defaultContents: "/month",
            value: args.children,
            className: classNames(sty.slotTargetChildren)
          })}
        </div>
        <div
          className={classNames(
            projectcss.all,
            projectcss.__wab_text,
            sty.text__kvAhe
          )}
        >
          <div
            className={projectcss.__wab_expr_html_text}
            dangerouslySetInnerHTML={{
              __html: (() => {
                try {
                  return $props.cardText;
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return "Enter text";
                  }
                  throw e;
                }
              })()
            }}
          />
        </div>
        <Stack__
          as={"button"}
          data-plasmic-name={"planButton"}
          data-plasmic-override={overrides.planButton}
          hasGap={true}
          className={classNames(
            projectcss.all,
            projectcss.button,
            sty.planButton
          )}
          ref={ref => {
            $refs["planButton"] = ref;
          }}
        >
          {false ? (
            <div
              data-plasmic-name={"startIconContainer"}
              data-plasmic-override={overrides.startIconContainer}
              className={classNames(projectcss.all, sty.startIconContainer)}
            >
              {renderPlasmicSlot({
                defaultContents: (
                  <CheckSvgIcon
                    className={classNames(projectcss.all, sty.svg__oBxKs)}
                    role={"img"}
                  />
                ),

                value: args.startIcon,
                className: classNames(sty.slotTargetStartIcon)
              })}
            </div>
          ) : null}
          <div
            data-plasmic-name={"contentContainer"}
            data-plasmic-override={overrides.contentContainer}
            className={classNames(projectcss.all, sty.contentContainer)}
          >
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text___2CwpT
              )}
            >
              <React.Fragment>
                {(() => {
                  try {
                    return $props.cardButtonText;
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return "Button";
                    }
                    throw e;
                  }
                })()}
              </React.Fragment>
            </div>
          </div>
          {false ? (
            <div
              data-plasmic-name={"endIconContainer"}
              data-plasmic-override={overrides.endIconContainer}
              className={classNames(projectcss.all, sty.endIconContainer)}
            >
              {renderPlasmicSlot({
                defaultContents: (
                  <IconIcon
                    className={classNames(projectcss.all, sty.svg__oIAr2)}
                    role={"img"}
                  />
                ),

                value: args.endIcon,
                className: classNames(sty.slotTargetEndIcon)
              })}
            </div>
          ) : null}
        </Stack__>
      </div>
      <Stack__
        as={"div"}
        data-plasmic-name={"planLists"}
        data-plasmic-override={overrides.planLists}
        hasGap={true}
        className={classNames(projectcss.all, sty.planLists)}
      >
        {(_par => (!_par ? [] : Array.isArray(_par) ? _par : [_par]))(
          (() => {
            try {
              return $props.listLoop;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return [];
              }
              throw e;
            }
          })()
        ).map((__plasmic_item_0, __plasmic_idx_0) => {
          const currentItem = __plasmic_item_0;
          const currentIndex = __plasmic_idx_0;
          return (
            <Stack__
              as={"div"}
              data-plasmic-name={"listItem"}
              data-plasmic-override={overrides.listItem}
              hasGap={true}
              className={classNames(projectcss.all, sty.listItem)}
              key={currentIndex}
            >
              <BulletDashSvgIcon
                data-plasmic-name={"svg"}
                data-plasmic-override={overrides.svg}
                className={classNames(projectcss.all, sty.svg)}
                role={"img"}
              />

              <div
                data-plasmic-name={"listText"}
                data-plasmic-override={overrides.listText}
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.listText
                )}
              >
                <React.Fragment>
                  {(() => {
                    try {
                      return currentItem;
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return "Enter text";
                      }
                      throw e;
                    }
                  })()}
                </React.Fragment>
              </div>
            </Stack__>
          );
        })}
      </Stack__>
    </div>
  );
}

const PlasmicDescendants = {
  card: [
    "card",
    "header",
    "body",
    "planButton",
    "startIconContainer",
    "contentContainer",
    "endIconContainer",
    "planLists",
    "listItem",
    "svg",
    "listText"
  ],

  header: ["header"],
  body: [
    "body",
    "planButton",
    "startIconContainer",
    "contentContainer",
    "endIconContainer"
  ],

  planButton: [
    "planButton",
    "startIconContainer",
    "contentContainer",
    "endIconContainer"
  ],

  startIconContainer: ["startIconContainer"],
  contentContainer: ["contentContainer"],
  endIconContainer: ["endIconContainer"],
  planLists: ["planLists", "listItem", "svg", "listText"],
  listItem: ["listItem", "svg", "listText"],
  svg: ["svg"],
  listText: ["listText"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicCard__ArgProps,
          internalVariantPropNames: PlasmicCard__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicCard__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "card") {
    func.displayName = "PlasmicCard";
  } else {
    func.displayName = `PlasmicCard.${nodeName}`;
  }
  return func;
}

export const PlasmicCard = Object.assign(
  // Top-level PlasmicCard renders the root element
  makeNodeComponent("card"),
  {
    // Helper components rendering sub-elements
    header: makeNodeComponent("header"),
    body: makeNodeComponent("body"),
    planButton: makeNodeComponent("planButton"),
    startIconContainer: makeNodeComponent("startIconContainer"),
    contentContainer: makeNodeComponent("contentContainer"),
    endIconContainer: makeNodeComponent("endIconContainer"),
    planLists: makeNodeComponent("planLists"),
    listItem: makeNodeComponent("listItem"),
    svg: makeNodeComponent("svg"),
    listText: makeNodeComponent("listText"),
    // Metadata about props expected for PlasmicCard
    internalVariantProps: PlasmicCard__VariantProps,
    internalArgProps: PlasmicCard__ArgProps
  }
);

export default PlasmicCard;
/* prettier-ignore-end */
